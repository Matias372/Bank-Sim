El proyecto es un simulador de atención bancaria, donde el usuario asume el rol de un 
empleado que debe procesar las solicitudes de clientes generados aleatoriamente. 
La idea principal es que los clientes realizan diversas solicitudes bancarias, como 
abrir cuentas, hacer depósitos, retiros, transferencias o incluso cerrar cuentas. 
Algunas solicitudes requieren la verificación de datos bancarios, lo que añade una 
capa de complejidad y realismo al juego.

El simulador sigue una estructura de días laborales, y a medida que avanza el tiempo, 
la cantidad de clientes aumenta, lo que también incrementa la dificultad del juego. 
El desempeño del usuario afecta la calidad de su trabajo. Si la calidad baja a 0, el 
juego termina, lo que simula el despido del empleado.

Puntos clave del proyecto

1. Generación diaria de clientes
Clientes aleatorios: Cada día, el simulador genera una lista de clientes con 
información generada aleatoriamente, incluyendo nombre, género, edad y DNI. Estos 
datos varían en cada nueva partida para aumentar la rejugabilidad.
Verificación de solicitudes: Cada cliente tiene una solicitud particular que puede 
o no requerir acceso al banco. Si la solicitud requiere acceso (por ejemplo, retiro 
de dinero), los datos del cliente se copian al registro bancario.
Clientes sospechosos (SUS): Existe una probabilidad del 10% de que un cliente sea 
"sospechoso", lo que implica que uno de sus datos será alterado sutilmente. Por 
ejemplo, su nombre podría tener una letra cambiada o su edad podría variar levemente. 
Si el usuario identifica a un cliente sospechoso, debe rechazar la solicitud e indicar
el motivo.

2. Registro bancario
Los clientes que solicitan operaciones que implican dinero, como retiros, ingresos o 
transferencias, deben estar registrados en el banco con sus datos y su saldo actual.
Saldo inicial aleatorio: Para los retiros, se genera un saldo inicial con un margen 
de ±10% respecto al monto solicitado. Esto crea situaciones donde el cliente puede 
tener saldo insuficiente, lo que añade dificultad al juego.

3. Procesamiento de solicitudes
Cada cliente tiene una petición que el usuario debe procesar. Esto puede ser aceptar,
 rechazar o revisar más a fondo la solicitud. La precisión con la que el usuario 
 procesa las solicitudes afecta directamente la "calidad del trabajo", una variable 
 clave en el simulador.
Errores y penalizaciones: Si el usuario comete errores (por ejemplo, no identifica un 
cliente sospechoso o procesa mal una solicitud), la calidad de su trabajo disminuye. 
Si la calidad llega a 0, el juego termina con el despido del empleado.

4. Sistema de días y calidad
El juego está estructurado en días laborales. Al final de cada día, se guarda el 
progreso del usuario, incluyendo los datos de los clientes atendidos y la calidad 
de su trabajo.
Incremento de dificultad: A medida que pasan los días, el número de clientes 
generados aumenta, lo que incrementa la carga de trabajo. Esto hace que sea más 
difícil para el usuario mantener una alta calidad en su desempeño.
Calidad del trabajo: El usuario comienza con una calidad de 5. Esta variable puede 
subir o bajar según el desempeño del usuario. Si el usuario completa un día sin 
errores, la calidad sube en +1. Si comete errores, baja en -1. Si la calidad baja a 
0, el juego termina, lo que simula que el usuario ha sido despedido.

5. Sistema de guardado y continuación
Al final de cada día, los datos del progreso (clientes atendidos, saldo, calidad del 
trabajo, etc.) se guardan en una carpeta llamada "saves". Esto permite que el usuario 
pueda detenerse y continuar la partida en otro momento, manteniendo su progreso.
Balance de dificultad y progreso: Uno de los retos principales del diseño de este 
simulador es encontrar el equilibrio entre la dificultad y el progreso. A medida que 
los días avanzan, la carga de trabajo del usuario se incrementa. Si el juego es 
demasiado fácil, puede volverse aburrido, pero si es demasiado difícil, puede resultar
frustrante.

6. Clientes sospechosos (SUS)
Los datos modificados de los clientes sospechosos deben ser detectables por el 
usuario, pero no tan evidentes como para que siempre los identifique de inmediato. 
Esto añade un elemento de desafío, ya que el jugador debe estar atento a pequeños 
errores en la información presentada.
La capacidad del usuario para detectar a estos clientes afecta directamente la calidad
de su trabajo.

7. Interfaz de usuario
Es crucial que la interfaz del simulador sea clara y sencilla. Debe mostrar de manera 
accesible los datos de los clientes (nombre, edad, solicitud, saldo, etc.) y las 
opciones que el usuario tiene para aceptar o rechazar solicitudes.
La interfaz debe ser lo suficientemente intuitiva para que el usuario pueda tomar 
decisiones rápidas, especialmente a medida que el número de clientes aumenta y el 
juego se vuelve más exigente.

Proceso lógico del desarrollo

Para estructurar el desarrollo del proyecto, los siguientes pasos son recomendados:

Diseño del sistema de generación de clientes:

Implementar un sistema que permita la creación de clientes aleatorios con los 
datos necesarios (nombre, género, edad, DNI).
Añadir la funcionalidad de generación diaria de clientes y determinar qué porcentaje 
de ellos será sospechoso.

Creación del registro bancario:

Diseñar el sistema de registro de clientes en el banco, incluyendo los datos básicos 
del cliente y su saldo.
Añadir la lógica para operaciones bancarias como depósitos, retiros y transferencias.

Implementación del procesamiento de solicitudes:

Crear un sistema que permita al usuario aceptar o rechazar solicitudes de clientes.
Desarrollar la lógica para validar si los clientes sospechosos son identificados 
correctamente por el usuario y cómo esto afecta la calidad de su trabajo.

Desarrollo del sistema de días y calidad:

Implementar el sistema de avance de días. Cada día, el número de clientes aumentará y 
la dificultad se incrementará. Desarrollar la lógica de la variable "calidad", 
asegurando que suba o baje de manera justa según el desempeño del usuario.

Sistema de guardado y carga:

Implementar un sistema de guardado al final de cada día para que el usuario pueda 
retomar su partida en cualquier momento.
Pruebas y ajustes de balance:

Una vez que las funcionalidades básicas estén implementadas, es importante realizar 
pruebas para asegurarse de que el juego no sea ni demasiado fácil ni frustrantemente 
difícil. El balance es clave para mantener el interés del usuario a lo largo del 
tiempo.



/*
Simulador de Banco
├── Menú Principal
│   ├── Base de Datos
│   │   ├── Buscar Cliente
│   │   ├── Agregar Cliente
│   │   └── Eliminar Cliente
│   ├── Operaciones
│   │   ├── Extraer Efectivo
│   │   │   ├── Ingresar DNI
│   │   │   ├── Ingresar Monto
│   │   │   └── Botón "Extraer"
│   │   ├── Ingresar Efectivo
│   │   │   ├── Ingresar DNI
│   │   │   ├── Ingresar Monto
│   │   │   └── Botón "Ingresar"
│   │   ├── Transferir Dinero
│   │   │   ├── Ingresar DNI de origen
│   │   │   ├── Ingresar DNI de destino
│   │   │   ├── Ingresar Monto
│   │   │   └── Botón "Transferir"
│   │   ├── Activar Tarjeta
│   │   │   ├── Ingresar DNI
│   │   │   └── Botón "Activar"
│   │   └── Desactivar Tarjeta
│   │       ├── Ingresar DNI
│   │       └── Botón "Desactivar"
│   ├── Rechazar Petición
│   │   ├── Seleccionar Motivo (con <select>)
│   │   ├── Botón "Rechazar"

    
    la Base de datos seria la clase Banco que tiene generarRegistroBanco donde 
    genera la lista de los clientes del dia.*/
